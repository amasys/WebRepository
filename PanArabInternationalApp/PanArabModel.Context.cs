//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PanArabInternationalApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class PANARAB_dbEntities : DbContext
    {
        public PANARAB_dbEntities()
            : base("name=PANARAB_dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tbl_FlyDetails> tbl_FlyDetails { get; set; }
        public DbSet<tbl_Manpower> tbl_Manpower { get; set; }
        public DbSet<tbl_Mofa> tbl_Mofa { get; set; }
        public DbSet<tbl_UserCreate> tbl_UserCreate { get; set; }
        public DbSet<tbl_Disctrict> tbl_Disctrict { get; set; }
        public DbSet<tbl_Medical> tbl_Medical { get; set; }
        public DbSet<tbl_Passport> tbl_Passport { get; set; }
        public DbSet<tbl_Finger> tbl_Finger { get; set; }
        public DbSet<tbl_JournelMaster> tbl_JournelMaster { get; set; }
        public DbSet<tbl_AccountLedger> tbl_AccountLedger { get; set; }
        public DbSet<tbl_PC_ConsoleLetter> tbl_PC_ConsoleLetter { get; set; }
        public DbSet<tbl_Passenger> tbl_Passenger { get; set; }
        public DbSet<viewExistPcClearence> viewExistPcClearences { get; set; }
        public DbSet<viewExistPassportSlNo> viewExistPassportSlNoes { get; set; }
        public DbSet<tbl_Temps> tbl_Temps { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<tbl_AccountGroup> tbl_AccountGroup { get; set; }
        public DbSet<tbl_AccountGroupToCopy> tbl_AccountGroupToCopy { get; set; }
        public DbSet<tbl_AccountLedgerToCopy> tbl_AccountLedgerToCopy { get; set; }
        public DbSet<tbl_AccoutnsLdegerSL> tbl_AccoutnsLdegerSL { get; set; }
        public DbSet<tbl_AdditionalCost> tbl_AdditionalCost { get; set; }
        public DbSet<tbl_AdvancePayment> tbl_AdvancePayment { get; set; }
        public DbSet<tbl_Agency> tbl_Agency { get; set; }
        public DbSet<tbl_AirlinesOrShipping> tbl_AirlinesOrShipping { get; set; }
        public DbSet<tbl_Area> tbl_Area { get; set; }
        public DbSet<tbl_AttendanceDetails> tbl_AttendanceDetails { get; set; }
        public DbSet<tbl_AttendanceMaster> tbl_AttendanceMaster { get; set; }
        public DbSet<tbl_BankReconciliation> tbl_BankReconciliation { get; set; }
        public DbSet<tbl_BarcodeSettings> tbl_BarcodeSettings { get; set; }
        public DbSet<tbl_Batch> tbl_Batch { get; set; }
        public DbSet<tbl_BOM> tbl_BOM { get; set; }
        public DbSet<tbl_BonusDeductionDetails> tbl_BonusDeductionDetails { get; set; }
        public DbSet<tbl_BonusDeductionMaster> tbl_BonusDeductionMaster { get; set; }
        public DbSet<tbl_Branch> tbl_Branch { get; set; }
        public DbSet<tbl_Brand> tbl_Brand { get; set; }
        public DbSet<tbl_BudgetAllocation> tbl_BudgetAllocation { get; set; }
        public DbSet<tbl_BudgetMaster> tbl_BudgetMaster { get; set; }
        public DbSet<tbl_BudgetPeriod> tbl_BudgetPeriod { get; set; }
        public DbSet<tbl_Company> tbl_Company { get; set; }
        public DbSet<tbl_CompanyPath> tbl_CompanyPath { get; set; }
        public DbSet<tbl_ComponentsSettings> tbl_ComponentsSettings { get; set; }
        public DbSet<tbl_Consignee> tbl_Consignee { get; set; }
        public DbSet<tbl_ContraDetails> tbl_ContraDetails { get; set; }
        public DbSet<tbl_ContraMaster> tbl_ContraMaster { get; set; }
        public DbSet<tbl_Counter> tbl_Counter { get; set; }
        public DbSet<tbl_CounterSaleDetails1> tbl_CounterSaleDetails1 { get; set; }
        public DbSet<tbl_CounterSaleMaster> tbl_CounterSaleMaster { get; set; }
        public DbSet<tbl_Currency> tbl_Currency { get; set; }
        public DbSet<tbl_CurrencyConversion> tbl_CurrencyConversion { get; set; }
        public DbSet<tbl_CurrencyToCopy> tbl_CurrencyToCopy { get; set; }
        public DbSet<tbl_DamagelStockMaster> tbl_DamagelStockMaster { get; set; }
        public DbSet<tbl_DamageStockDetails1> tbl_DamageStockDetails1 { get; set; }
        public DbSet<tbl_DamageStockDetails2> tbl_DamageStockDetails2 { get; set; }
        public DbSet<tbl_DebitNoteDetails> tbl_DebitNoteDetails { get; set; }
        public DbSet<tbl_DebitNoteMaster> tbl_DebitNoteMaster { get; set; }
        public DbSet<tbl_DeleteStatus> tbl_DeleteStatus { get; set; }
        public DbSet<tbl_DeliveryNoteDetails1> tbl_DeliveryNoteDetails1 { get; set; }
        public DbSet<tbl_DeliveryNoteDetails2> tbl_DeliveryNoteDetails2 { get; set; }
        public DbSet<tbl_DeliveryNoteMaster> tbl_DeliveryNoteMaster { get; set; }
        public DbSet<tbl_Designation> tbl_Designation { get; set; }
        public DbSet<tbl_Destination> tbl_Destination { get; set; }
        public DbSet<tbl_Details> tbl_Details { get; set; }
        public DbSet<tbl_DetailsCopy> tbl_DetailsCopy { get; set; }
        public DbSet<tbl_DotMatrixSettings> tbl_DotMatrixSettings { get; set; }
        public DbSet<tbl_DotMatrixSettingsToCopy> tbl_DotMatrixSettingsToCopy { get; set; }
        public DbSet<tbl_Employee> tbl_Employee { get; set; }
        public DbSet<tbl_ExitPoint> tbl_ExitPoint { get; set; }
        public DbSet<tbl_Fields> tbl_Fields { get; set; }
        public DbSet<tbl_FieldsCopy> tbl_FieldsCopy { get; set; }
        public DbSet<tbl_FinancialYear> tbl_FinancialYear { get; set; }
        public DbSet<tbl_Form> tbl_Form { get; set; }
        public DbSet<tbl_FormCopy> tbl_FormCopy { get; set; }
        public DbSet<tbl_GatePass> tbl_GatePass { get; set; }
        public DbSet<tbl_Godown> tbl_Godown { get; set; }
        public DbSet<tbl_Holiday> tbl_Holiday { get; set; }
        public DbSet<tbl_IntrestParameterDetails> tbl_IntrestParameterDetails { get; set; }
        public DbSet<tbl_IntrestParameterSettings> tbl_IntrestParameterSettings { get; set; }
        public DbSet<tbl_IntrestPayable> tbl_IntrestPayable { get; set; }
        public DbSet<tbl_IntrestPayableDetails> tbl_IntrestPayableDetails { get; set; }
        public DbSet<tbl_IntrestReceivable> tbl_IntrestReceivable { get; set; }
        public DbSet<tbl_IntrestReceivableDetails> tbl_IntrestReceivableDetails { get; set; }
        public DbSet<tbl_InvoiceDeclaration> tbl_InvoiceDeclaration { get; set; }
        public DbSet<tbl_Job> tbl_Job { get; set; }
        public DbSet<tbl_JobInvoice> tbl_JobInvoice { get; set; }
        public DbSet<tbl_JobType> tbl_JobType { get; set; }
        public DbSet<tbl_JobTypeToCopy> tbl_JobTypeToCopy { get; set; }
        public DbSet<tbl_JournelDetails> tbl_JournelDetails { get; set; }
        public DbSet<tbl_LedgerPosting> tbl_LedgerPosting { get; set; }
        public DbSet<tbl_ManufacturingJounralDetails2> tbl_ManufacturingJounralDetails2 { get; set; }
        public DbSet<tbl_ManufacturingJournalDetails> tbl_ManufacturingJournalDetails { get; set; }
        public DbSet<tbl_ManufacturingJournalMaster> tbl_ManufacturingJournalMaster { get; set; }
        public DbSet<tbl_Market> tbl_Market { get; set; }
        public DbSet<tbl_Master> tbl_Master { get; set; }
        public DbSet<tbl_MasterCopy> tbl_MasterCopy { get; set; }
        public DbSet<tbl_MaterialReceiptDetails1> tbl_MaterialReceiptDetails1 { get; set; }
        public DbSet<tbl_MaterialReceiptDetails2> tbl_MaterialReceiptDetails2 { get; set; }
        public DbSet<tbl_MaterialReceiptMaster> tbl_MaterialReceiptMaster { get; set; }
        public DbSet<tbl_Origin> tbl_Origin { get; set; }
        public DbSet<tbl_PackageSale> tbl_PackageSale { get; set; }
        public DbSet<tbl_PartyBalance> tbl_PartyBalance { get; set; }
        public DbSet<tbl_Payhead> tbl_Payhead { get; set; }
        public DbSet<tbl_PaymentDetails> tbl_PaymentDetails { get; set; }
        public DbSet<tbl_PaymentMaster> tbl_PaymentMaster { get; set; }
        public DbSet<tbl_PDCPayable> tbl_PDCPayable { get; set; }
        public DbSet<tbl_PDCReceivable> tbl_PDCReceivable { get; set; }
        public DbSet<tbl_PhysicalStockDetails1> tbl_PhysicalStockDetails1 { get; set; }
        public DbSet<tbl_PhysicalStockDetails2> tbl_PhysicalStockDetails2 { get; set; }
        public DbSet<tbl_PhysicalStockMaster> tbl_PhysicalStockMaster { get; set; }
        public DbSet<tbl_PriceList> tbl_PriceList { get; set; }
        public DbSet<tbl_PricingLevel> tbl_PricingLevel { get; set; }
        public DbSet<tbl_Privilege> tbl_Privilege { get; set; }
        public DbSet<tbl_PrivilegeDetails> tbl_PrivilegeDetails { get; set; }
        public DbSet<tbl_Product> tbl_Product { get; set; }
        public DbSet<tbl_ProductDetails> tbl_ProductDetails { get; set; }
        public DbSet<tbl_ProductGroup> tbl_ProductGroup { get; set; }
        public DbSet<tbl_PurchaseDetails1> tbl_PurchaseDetails1 { get; set; }
        public DbSet<tbl_PurchaseDetails2> tbl_PurchaseDetails2 { get; set; }
        public DbSet<tbl_PurchaseMaster> tbl_PurchaseMaster { get; set; }
        public DbSet<tbl_PurchaseOrderDetails1> tbl_PurchaseOrderDetails1 { get; set; }
        public DbSet<tbl_PurchaseOrderMaster> tbl_PurchaseOrderMaster { get; set; }
        public DbSet<tbl_PurchaseReturnDetails1> tbl_PurchaseReturnDetails1 { get; set; }
        public DbSet<tbl_PurchaseReturnDetails2> tbl_PurchaseReturnDetails2 { get; set; }
        public DbSet<tbl_PurchaseReturnMaster> tbl_PurchaseReturnMaster { get; set; }
        public DbSet<tbl_QuickLaunch> tbl_QuickLaunch { get; set; }
        public DbSet<tbl_QuickLaunchItems> tbl_QuickLaunchItems { get; set; }
        public DbSet<tbl_QuickLaunchItemsToCopy> tbl_QuickLaunchItemsToCopy { get; set; }
        public DbSet<tbl_Quotation> tbl_Quotation { get; set; }
        public DbSet<tbl_QuotationDetails> tbl_QuotationDetails { get; set; }
        public DbSet<tbl_QuotationMaster> tbl_QuotationMaster { get; set; }
        public DbSet<tbl_Rack> tbl_Rack { get; set; }
        public DbSet<tbl_ReceiptDetails> tbl_ReceiptDetails { get; set; }
        public DbSet<tbl_ReceiptMaster> tbl_ReceiptMaster { get; set; }
        public DbSet<tbl_RejectionInDetails1> tbl_RejectionInDetails1 { get; set; }
        public DbSet<tbl_RejectionInDetails2> tbl_RejectionInDetails2 { get; set; }
        public DbSet<tbl_RejectionInMaster> tbl_RejectionInMaster { get; set; }
        public DbSet<tbl_RejectionOutDetails1> tbl_RejectionOutDetails1 { get; set; }
        public DbSet<tbl_RejectionOutDetails2> tbl_RejectionOutDetails2 { get; set; }
        public DbSet<tbl_RejectionOutMaster> tbl_RejectionOutMaster { get; set; }
        public DbSet<tbl_Reminder> tbl_Reminder { get; set; }
        public DbSet<tbl_Route> tbl_Route { get; set; }
        public DbSet<tbl_SalaryDetails1> tbl_SalaryDetails1 { get; set; }
        public DbSet<tbl_SalaryDetails2> tbl_SalaryDetails2 { get; set; }
        public DbSet<tbl_SalaryMaster> tbl_SalaryMaster { get; set; }
        public DbSet<tbl_SalarySettings> tbl_SalarySettings { get; set; }
        public DbSet<tbl_SalarySettingsDetails> tbl_SalarySettingsDetails { get; set; }
        public DbSet<tbl_SalesDetails1> tbl_SalesDetails1 { get; set; }
        public DbSet<tbl_SalesDetails2> tbl_SalesDetails2 { get; set; }
        public DbSet<tbl_SalesMaster> tbl_SalesMaster { get; set; }
        public DbSet<tbl_SalesOrderDetails1> tbl_SalesOrderDetails1 { get; set; }
        public DbSet<tbl_SalesOrderMaster> tbl_SalesOrderMaster { get; set; }
        public DbSet<tbl_SalesPromotionDetails1> tbl_SalesPromotionDetails1 { get; set; }
        public DbSet<tbl_SalesPromotionDetails2> tbl_SalesPromotionDetails2 { get; set; }
        public DbSet<tbl_SalesPromotionMaster> tbl_SalesPromotionMaster { get; set; }
        public DbSet<tbl_SalesPromotionStatus> tbl_SalesPromotionStatus { get; set; }
        public DbSet<tbl_SalesReturnDetails1> tbl_SalesReturnDetails1 { get; set; }
        public DbSet<tbl_SalesReturnDetails2> tbl_SalesReturnDetails2 { get; set; }
        public DbSet<tbl_SalesReturnMaster> tbl_SalesReturnMaster { get; set; }
        public DbSet<tbl_Service> tbl_Service { get; set; }
        public DbSet<tbl_ServiceDetails> tbl_ServiceDetails { get; set; }
        public DbSet<tbl_ServiceMaster> tbl_ServiceMaster { get; set; }
        public DbSet<tbl_Settings> tbl_Settings { get; set; }
        public DbSet<tbl_Shipper> tbl_Shipper { get; set; }
        public DbSet<tbl_StandardRate> tbl_StandardRate { get; set; }
        public DbSet<tbl_StockPosting> tbl_StockPosting { get; set; }
        public DbSet<tbl_SuffixPrefix> tbl_SuffixPrefix { get; set; }
        public DbSet<tbl_TailoringDetails> tbl_TailoringDetails { get; set; }
        public DbSet<tbl_TailoringMaster> tbl_TailoringMaster { get; set; }
        public DbSet<tbl_TailoringPayment> tbl_TailoringPayment { get; set; }
        public DbSet<tbl_TaxDetails> tbl_TaxDetails { get; set; }
        public DbSet<tbl_TaxDetailsToCopy> tbl_TaxDetailsToCopy { get; set; }
        public DbSet<tbl_TaxMaster> tbl_TaxMaster { get; set; }
        public DbSet<tbl_TaxMasterToCopy> tbl_TaxMasterToCopy { get; set; }
        public DbSet<tbl_Temps1> tbl_Temps1 { get; set; }
        public DbSet<tbl_TransferDetails> tbl_TransferDetails { get; set; }
        public DbSet<tbl_TransferMaster> tbl_TransferMaster { get; set; }
        public DbSet<tbl_Unit> tbl_Unit { get; set; }
        public DbSet<tbl_UnitConversion> tbl_UnitConversion { get; set; }
        public DbSet<tbl_UpdationStatus> tbl_UpdationStatus { get; set; }
        public DbSet<tbl_UsedStockDetails1> tbl_UsedStockDetails1 { get; set; }
        public DbSet<tbl_UsedStockDetails2> tbl_UsedStockDetails2 { get; set; }
        public DbSet<tbl_UsedStockMaster> tbl_UsedStockMaster { get; set; }
        public DbSet<tbl_User> tbl_User { get; set; }
        public DbSet<tbl_VatJournalDetails> tbl_VatJournalDetails { get; set; }
        public DbSet<tbl_VatJournalMaster> tbl_VatJournalMaster { get; set; }
        public DbSet<tbl_VehicleType> tbl_VehicleType { get; set; }
        public DbSet<ViewCashBank> ViewCashBanks { get; set; }
        public DbSet<ViewParty> ViewParties { get; set; }
        public DbSet<vwCashInHandLedger> vwCashInHandLedgers { get; set; }
        public DbSet<viewgroupID> viewgroupIDs { get; set; }
        public DbSet<viewPassport> viewPassports { get; set; }
        public DbSet<ViewGetAllPassenger> ViewGetAllPassengers { get; set; }
        public DbSet<tbl_VisaProcessing> tbl_VisaProcessing { get; set; }
    
        public virtual ObjectResult<SpPassport_Result> SpPassport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPassport_Result>("SpPassport");
        }
    
        public virtual ObjectResult<sp_VisaProcessing_Result> sp_VisaProcessing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VisaProcessing_Result>("sp_VisaProcessing");
        }
    
        public virtual ObjectResult<sp_Finger_Result> sp_Finger()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Finger_Result>("sp_Finger");
        }
    
        public virtual ObjectResult<sp_Fly_Result> sp_Fly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Fly_Result>("sp_Fly");
        }
    
        public virtual ObjectResult<sp_ManPower_Result> sp_ManPower()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ManPower_Result>("sp_ManPower");
        }
    
        public virtual ObjectResult<sp_ClearMedicalList_Result> sp_ClearMedicalList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearMedicalList_Result>("sp_ClearMedicalList");
        }
    
        public virtual ObjectResult<sp_Mofa_Result> sp_Mofa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Mofa_Result>("sp_Mofa");
        }
    
        public virtual ObjectResult<sp_ClearFinger_Result> sp_ClearFinger()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearFinger_Result>("sp_ClearFinger");
        }
    
        public virtual ObjectResult<sp_ClearFly_Result> sp_ClearFly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearFly_Result>("sp_ClearFly");
        }
    
        public virtual ObjectResult<sp_ClearManPower_Result> sp_ClearManPower()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearManPower_Result>("sp_ClearManPower");
        }
    
        public virtual ObjectResult<sp_ClearVisaProcessing_Result> sp_ClearVisaProcessing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearVisaProcessing_Result>("sp_ClearVisaProcessing");
        }
    
        public virtual ObjectResult<sp_ClearMofa_Result> sp_ClearMofa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearMofa_Result>("sp_ClearMofa");
        }
    
        public virtual int JournelDetailsAdd(string journalMasterId, string ledgerId, Nullable<decimal> credit, Nullable<decimal> debit, string extra1, string extra2, string currecyConversionId)
        {
            var journalMasterIdParameter = journalMasterId != null ?
                new ObjectParameter("JournalMasterId", journalMasterId) :
                new ObjectParameter("JournalMasterId", typeof(string));
    
            var ledgerIdParameter = ledgerId != null ?
                new ObjectParameter("ledgerId", ledgerId) :
                new ObjectParameter("ledgerId", typeof(string));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(decimal));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("debit", debit) :
                new ObjectParameter("debit", typeof(decimal));
    
            var extra1Parameter = extra1 != null ?
                new ObjectParameter("extra1", extra1) :
                new ObjectParameter("extra1", typeof(string));
    
            var extra2Parameter = extra2 != null ?
                new ObjectParameter("extra2", extra2) :
                new ObjectParameter("extra2", typeof(string));
    
            var currecyConversionIdParameter = currecyConversionId != null ?
                new ObjectParameter("currecyConversionId", currecyConversionId) :
                new ObjectParameter("currecyConversionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournelDetailsAdd", journalMasterIdParameter, ledgerIdParameter, creditParameter, debitParameter, extra1Parameter, extra2Parameter, currecyConversionIdParameter);
        }
    
        public virtual int LedgerPostingAdd(Nullable<System.DateTime> date, string voucherType, string voucherNo, string ledgerId, Nullable<decimal> debit, Nullable<decimal> credit, Nullable<bool> optional, string branchId, string extra1, string extra2)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("voucherType", voucherType) :
                new ObjectParameter("voucherType", typeof(string));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var ledgerIdParameter = ledgerId != null ?
                new ObjectParameter("ledgerId", ledgerId) :
                new ObjectParameter("ledgerId", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("debit", debit) :
                new ObjectParameter("debit", typeof(decimal));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(decimal));
    
            var optionalParameter = optional.HasValue ?
                new ObjectParameter("optional", optional) :
                new ObjectParameter("optional", typeof(bool));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(string));
    
            var extra1Parameter = extra1 != null ?
                new ObjectParameter("extra1", extra1) :
                new ObjectParameter("extra1", typeof(string));
    
            var extra2Parameter = extra2 != null ?
                new ObjectParameter("extra2", extra2) :
                new ObjectParameter("extra2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LedgerPostingAdd", dateParameter, voucherTypeParameter, voucherNoParameter, ledgerIdParameter, debitParameter, creditParameter, optionalParameter, branchIdParameter, extra1Parameter, extra2Parameter);
        }
    
        public virtual ObjectResult<string> AccountLedgerAdd(string ledgerName, string groupId, Nullable<bool> affectInventory, Nullable<decimal> openingBalance, string crOrDr, string narration, string name, string accountNo, string address, string phoneNo, string faxNo, string email, Nullable<int> creditPeriod, Nullable<decimal> creditLimit, string pricingLevelId, string currencyId, Nullable<bool> interestOrNot, string branchId, string extra1, string extra2, string marketId, Nullable<bool> defaultt, string tinNumber, string cstNumber, string panNumber, string areaId)
        {
            var ledgerNameParameter = ledgerName != null ?
                new ObjectParameter("ledgerName", ledgerName) :
                new ObjectParameter("ledgerName", typeof(string));
    
            var groupIdParameter = groupId != null ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(string));
    
            var affectInventoryParameter = affectInventory.HasValue ?
                new ObjectParameter("affectInventory", affectInventory) :
                new ObjectParameter("affectInventory", typeof(bool));
    
            var openingBalanceParameter = openingBalance.HasValue ?
                new ObjectParameter("openingBalance", openingBalance) :
                new ObjectParameter("openingBalance", typeof(decimal));
    
            var crOrDrParameter = crOrDr != null ?
                new ObjectParameter("crOrDr", crOrDr) :
                new ObjectParameter("crOrDr", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("narration", narration) :
                new ObjectParameter("narration", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("faxNo", faxNo) :
                new ObjectParameter("faxNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var creditPeriodParameter = creditPeriod.HasValue ?
                new ObjectParameter("creditPeriod", creditPeriod) :
                new ObjectParameter("creditPeriod", typeof(int));
    
            var creditLimitParameter = creditLimit.HasValue ?
                new ObjectParameter("creditLimit", creditLimit) :
                new ObjectParameter("creditLimit", typeof(decimal));
    
            var pricingLevelIdParameter = pricingLevelId != null ?
                new ObjectParameter("pricingLevelId", pricingLevelId) :
                new ObjectParameter("pricingLevelId", typeof(string));
    
            var currencyIdParameter = currencyId != null ?
                new ObjectParameter("currencyId", currencyId) :
                new ObjectParameter("currencyId", typeof(string));
    
            var interestOrNotParameter = interestOrNot.HasValue ?
                new ObjectParameter("interestOrNot", interestOrNot) :
                new ObjectParameter("interestOrNot", typeof(bool));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(string));
    
            var extra1Parameter = extra1 != null ?
                new ObjectParameter("extra1", extra1) :
                new ObjectParameter("extra1", typeof(string));
    
            var extra2Parameter = extra2 != null ?
                new ObjectParameter("extra2", extra2) :
                new ObjectParameter("extra2", typeof(string));
    
            var marketIdParameter = marketId != null ?
                new ObjectParameter("marketId", marketId) :
                new ObjectParameter("marketId", typeof(string));
    
            var defaulttParameter = defaultt.HasValue ?
                new ObjectParameter("defaultt", defaultt) :
                new ObjectParameter("defaultt", typeof(bool));
    
            var tinNumberParameter = tinNumber != null ?
                new ObjectParameter("tinNumber", tinNumber) :
                new ObjectParameter("tinNumber", typeof(string));
    
            var cstNumberParameter = cstNumber != null ?
                new ObjectParameter("cstNumber", cstNumber) :
                new ObjectParameter("cstNumber", typeof(string));
    
            var panNumberParameter = panNumber != null ?
                new ObjectParameter("panNumber", panNumber) :
                new ObjectParameter("panNumber", typeof(string));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("areaId", areaId) :
                new ObjectParameter("areaId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AccountLedgerAdd", ledgerNameParameter, groupIdParameter, affectInventoryParameter, openingBalanceParameter, crOrDrParameter, narrationParameter, nameParameter, accountNoParameter, addressParameter, phoneNoParameter, faxNoParameter, emailParameter, creditPeriodParameter, creditLimitParameter, pricingLevelIdParameter, currencyIdParameter, interestOrNotParameter, branchIdParameter, extra1Parameter, extra2Parameter, marketIdParameter, defaulttParameter, tinNumberParameter, cstNumberParameter, panNumberParameter, areaIdParameter);
        }
    
        public virtual int JournelMasterAdd(string journalNo, Nullable<System.DateTime> date, string narration, Nullable<bool> optional, string userId, string branchId, string extra1, string extra2, string yearId)
        {
            var journalNoParameter = journalNo != null ?
                new ObjectParameter("JournalNo", journalNo) :
                new ObjectParameter("JournalNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("narration", narration) :
                new ObjectParameter("narration", typeof(string));
    
            var optionalParameter = optional.HasValue ?
                new ObjectParameter("optional", optional) :
                new ObjectParameter("optional", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(string));
    
            var extra1Parameter = extra1 != null ?
                new ObjectParameter("extra1", extra1) :
                new ObjectParameter("extra1", typeof(string));
    
            var extra2Parameter = extra2 != null ?
                new ObjectParameter("extra2", extra2) :
                new ObjectParameter("extra2", typeof(string));
    
            var yearIdParameter = yearId != null ?
                new ObjectParameter("yearId", yearId) :
                new ObjectParameter("yearId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournelMasterAdd", journalNoParameter, dateParameter, narrationParameter, optionalParameter, userIdParameter, branchIdParameter, extra1Parameter, extra2Parameter, yearIdParameter);
        }
    
        public virtual int JournelDetailsAddPassenger(string journalMasterId, Nullable<decimal> credit, Nullable<decimal> debit, string extra1, string extra2, string currecyConversionId)
        {
            var journalMasterIdParameter = journalMasterId != null ?
                new ObjectParameter("JournalMasterId", journalMasterId) :
                new ObjectParameter("JournalMasterId", typeof(string));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(decimal));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("debit", debit) :
                new ObjectParameter("debit", typeof(decimal));
    
            var extra1Parameter = extra1 != null ?
                new ObjectParameter("extra1", extra1) :
                new ObjectParameter("extra1", typeof(string));
    
            var extra2Parameter = extra2 != null ?
                new ObjectParameter("extra2", extra2) :
                new ObjectParameter("extra2", typeof(string));
    
            var currecyConversionIdParameter = currecyConversionId != null ?
                new ObjectParameter("currecyConversionId", currecyConversionId) :
                new ObjectParameter("currecyConversionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournelDetailsAddPassenger", journalMasterIdParameter, creditParameter, debitParameter, extra1Parameter, extra2Parameter, currecyConversionIdParameter);
        }
    
        public virtual ObjectResult<sp_PC_CompleteClearence_Result> sp_PC_CompleteClearence()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PC_CompleteClearence_Result>("sp_PC_CompleteClearence");
        }
    
        public virtual ObjectResult<Sp_ExistPcClearence_Result> Sp_ExistPcClearence()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ExistPcClearence_Result>("Sp_ExistPcClearence");
        }
    
        public virtual ObjectResult<Sp_PassengerReportStatus_Result> Sp_PassengerReportStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PassengerReportStatus_Result>("Sp_PassengerReportStatus");
        }
    
        public virtual ObjectResult<sp_ConsoleLetter_Result> sp_ConsoleLetter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ConsoleLetter_Result>("sp_ConsoleLetter");
        }
    
        public virtual int Sp_LedgerAndJournalPostingUpdateDrCr(string voucherNo, string debit, string credit, string checkedDrCr, string query)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var debitParameter = debit != null ?
                new ObjectParameter("debit", debit) :
                new ObjectParameter("debit", typeof(string));
    
            var creditParameter = credit != null ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(string));
    
            var checkedDrCrParameter = checkedDrCr != null ?
                new ObjectParameter("checkedDrCr", checkedDrCr) :
                new ObjectParameter("checkedDrCr", typeof(string));
    
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LedgerAndJournalPostingUpdateDrCr", voucherNoParameter, debitParameter, creditParameter, checkedDrCrParameter, queryParameter);
        }
    }
}
