//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PanArabInternationalApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class PANARAB_dbEntities : DbContext
    {
        public PANARAB_dbEntities()
            : base("name=PANARAB_dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tbl_FlyDetails> tbl_FlyDetails { get; set; }
        public DbSet<tbl_Manpower> tbl_Manpower { get; set; }
        public DbSet<tbl_Mofa> tbl_Mofa { get; set; }
        public DbSet<tbl_UserCreate> tbl_UserCreate { get; set; }
        public DbSet<tbl_VisaProcessing> tbl_VisaProcessing { get; set; }
        public DbSet<tbl_Disctrict> tbl_Disctrict { get; set; }
        public DbSet<ViewGetAllPassenger> ViewGetAllPassengers { get; set; }
        public DbSet<tbl_Medical> tbl_Medical { get; set; }
        public DbSet<tbl_Passport> tbl_Passport { get; set; }
        public DbSet<tbl_Finger> tbl_Finger { get; set; }
        public DbSet<tbl_JournelMaster> tbl_JournelMaster { get; set; }
        public DbSet<tbl_AccountLedger> tbl_AccountLedger { get; set; }
        public DbSet<tbl_PC_ConsoleLetter> tbl_PC_ConsoleLetter { get; set; }
        public DbSet<tbl_Passenger> tbl_Passenger { get; set; }
        public DbSet<viewExistPcClearence> viewExistPcClearences { get; set; }
        public DbSet<viewExistPassportSlNo> viewExistPassportSlNoes { get; set; }
    
        public virtual ObjectResult<SpPassport_Result> SpPassport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPassport_Result>("SpPassport");
        }
    
        public virtual ObjectResult<sp_VisaProcessing_Result> sp_VisaProcessing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VisaProcessing_Result>("sp_VisaProcessing");
        }
    
        public virtual ObjectResult<sp_Finger_Result> sp_Finger()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Finger_Result>("sp_Finger");
        }
    
        public virtual ObjectResult<sp_Fly_Result> sp_Fly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Fly_Result>("sp_Fly");
        }
    
        public virtual ObjectResult<sp_ManPower_Result> sp_ManPower()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ManPower_Result>("sp_ManPower");
        }
    
        public virtual ObjectResult<sp_ClearMedicalList_Result> sp_ClearMedicalList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearMedicalList_Result>("sp_ClearMedicalList");
        }
    
        public virtual ObjectResult<sp_Mofa_Result> sp_Mofa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Mofa_Result>("sp_Mofa");
        }
    
        public virtual ObjectResult<sp_ClearFinger_Result> sp_ClearFinger()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearFinger_Result>("sp_ClearFinger");
        }
    
        public virtual ObjectResult<sp_ClearFly_Result> sp_ClearFly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearFly_Result>("sp_ClearFly");
        }
    
        public virtual ObjectResult<sp_ClearManPower_Result> sp_ClearManPower()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearManPower_Result>("sp_ClearManPower");
        }
    
        public virtual ObjectResult<sp_ClearVisaProcessing_Result> sp_ClearVisaProcessing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearVisaProcessing_Result>("sp_ClearVisaProcessing");
        }
    
        public virtual ObjectResult<sp_ClearMofa_Result> sp_ClearMofa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClearMofa_Result>("sp_ClearMofa");
        }
    
        public virtual int JournelDetailsAdd(string journalMasterId, string ledgerId, Nullable<decimal> credit, Nullable<decimal> debit, string extra1, string extra2, string currecyConversionId)
        {
            var journalMasterIdParameter = journalMasterId != null ?
                new ObjectParameter("JournalMasterId", journalMasterId) :
                new ObjectParameter("JournalMasterId", typeof(string));
    
            var ledgerIdParameter = ledgerId != null ?
                new ObjectParameter("ledgerId", ledgerId) :
                new ObjectParameter("ledgerId", typeof(string));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(decimal));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("debit", debit) :
                new ObjectParameter("debit", typeof(decimal));
    
            var extra1Parameter = extra1 != null ?
                new ObjectParameter("extra1", extra1) :
                new ObjectParameter("extra1", typeof(string));
    
            var extra2Parameter = extra2 != null ?
                new ObjectParameter("extra2", extra2) :
                new ObjectParameter("extra2", typeof(string));
    
            var currecyConversionIdParameter = currecyConversionId != null ?
                new ObjectParameter("currecyConversionId", currecyConversionId) :
                new ObjectParameter("currecyConversionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournelDetailsAdd", journalMasterIdParameter, ledgerIdParameter, creditParameter, debitParameter, extra1Parameter, extra2Parameter, currecyConversionIdParameter);
        }
    
        public virtual int LedgerPostingAdd(Nullable<System.DateTime> date, string voucherType, string voucherNo, string ledgerId, Nullable<decimal> debit, Nullable<decimal> credit, Nullable<bool> optional, string branchId, string extra1, string extra2)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("voucherType", voucherType) :
                new ObjectParameter("voucherType", typeof(string));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var ledgerIdParameter = ledgerId != null ?
                new ObjectParameter("ledgerId", ledgerId) :
                new ObjectParameter("ledgerId", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("debit", debit) :
                new ObjectParameter("debit", typeof(decimal));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(decimal));
    
            var optionalParameter = optional.HasValue ?
                new ObjectParameter("optional", optional) :
                new ObjectParameter("optional", typeof(bool));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(string));
    
            var extra1Parameter = extra1 != null ?
                new ObjectParameter("extra1", extra1) :
                new ObjectParameter("extra1", typeof(string));
    
            var extra2Parameter = extra2 != null ?
                new ObjectParameter("extra2", extra2) :
                new ObjectParameter("extra2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LedgerPostingAdd", dateParameter, voucherTypeParameter, voucherNoParameter, ledgerIdParameter, debitParameter, creditParameter, optionalParameter, branchIdParameter, extra1Parameter, extra2Parameter);
        }
    
        public virtual ObjectResult<string> AccountLedgerAdd(string ledgerName, string groupId, Nullable<bool> affectInventory, Nullable<decimal> openingBalance, string crOrDr, string narration, string name, string accountNo, string address, string phoneNo, string faxNo, string email, Nullable<int> creditPeriod, Nullable<decimal> creditLimit, string pricingLevelId, string currencyId, Nullable<bool> interestOrNot, string branchId, string extra1, string extra2, string marketId, Nullable<bool> defaultt, string tinNumber, string cstNumber, string panNumber, string areaId)
        {
            var ledgerNameParameter = ledgerName != null ?
                new ObjectParameter("ledgerName", ledgerName) :
                new ObjectParameter("ledgerName", typeof(string));
    
            var groupIdParameter = groupId != null ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(string));
    
            var affectInventoryParameter = affectInventory.HasValue ?
                new ObjectParameter("affectInventory", affectInventory) :
                new ObjectParameter("affectInventory", typeof(bool));
    
            var openingBalanceParameter = openingBalance.HasValue ?
                new ObjectParameter("openingBalance", openingBalance) :
                new ObjectParameter("openingBalance", typeof(decimal));
    
            var crOrDrParameter = crOrDr != null ?
                new ObjectParameter("crOrDr", crOrDr) :
                new ObjectParameter("crOrDr", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("narration", narration) :
                new ObjectParameter("narration", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("faxNo", faxNo) :
                new ObjectParameter("faxNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var creditPeriodParameter = creditPeriod.HasValue ?
                new ObjectParameter("creditPeriod", creditPeriod) :
                new ObjectParameter("creditPeriod", typeof(int));
    
            var creditLimitParameter = creditLimit.HasValue ?
                new ObjectParameter("creditLimit", creditLimit) :
                new ObjectParameter("creditLimit", typeof(decimal));
    
            var pricingLevelIdParameter = pricingLevelId != null ?
                new ObjectParameter("pricingLevelId", pricingLevelId) :
                new ObjectParameter("pricingLevelId", typeof(string));
    
            var currencyIdParameter = currencyId != null ?
                new ObjectParameter("currencyId", currencyId) :
                new ObjectParameter("currencyId", typeof(string));
    
            var interestOrNotParameter = interestOrNot.HasValue ?
                new ObjectParameter("interestOrNot", interestOrNot) :
                new ObjectParameter("interestOrNot", typeof(bool));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(string));
    
            var extra1Parameter = extra1 != null ?
                new ObjectParameter("extra1", extra1) :
                new ObjectParameter("extra1", typeof(string));
    
            var extra2Parameter = extra2 != null ?
                new ObjectParameter("extra2", extra2) :
                new ObjectParameter("extra2", typeof(string));
    
            var marketIdParameter = marketId != null ?
                new ObjectParameter("marketId", marketId) :
                new ObjectParameter("marketId", typeof(string));
    
            var defaulttParameter = defaultt.HasValue ?
                new ObjectParameter("defaultt", defaultt) :
                new ObjectParameter("defaultt", typeof(bool));
    
            var tinNumberParameter = tinNumber != null ?
                new ObjectParameter("tinNumber", tinNumber) :
                new ObjectParameter("tinNumber", typeof(string));
    
            var cstNumberParameter = cstNumber != null ?
                new ObjectParameter("cstNumber", cstNumber) :
                new ObjectParameter("cstNumber", typeof(string));
    
            var panNumberParameter = panNumber != null ?
                new ObjectParameter("panNumber", panNumber) :
                new ObjectParameter("panNumber", typeof(string));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("areaId", areaId) :
                new ObjectParameter("areaId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AccountLedgerAdd", ledgerNameParameter, groupIdParameter, affectInventoryParameter, openingBalanceParameter, crOrDrParameter, narrationParameter, nameParameter, accountNoParameter, addressParameter, phoneNoParameter, faxNoParameter, emailParameter, creditPeriodParameter, creditLimitParameter, pricingLevelIdParameter, currencyIdParameter, interestOrNotParameter, branchIdParameter, extra1Parameter, extra2Parameter, marketIdParameter, defaulttParameter, tinNumberParameter, cstNumberParameter, panNumberParameter, areaIdParameter);
        }
    
        public virtual int JournelMasterAdd(string journalNo, Nullable<System.DateTime> date, string narration, Nullable<bool> optional, string userId, string branchId, string extra1, string extra2, string yearId)
        {
            var journalNoParameter = journalNo != null ?
                new ObjectParameter("JournalNo", journalNo) :
                new ObjectParameter("JournalNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("narration", narration) :
                new ObjectParameter("narration", typeof(string));
    
            var optionalParameter = optional.HasValue ?
                new ObjectParameter("optional", optional) :
                new ObjectParameter("optional", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(string));
    
            var extra1Parameter = extra1 != null ?
                new ObjectParameter("extra1", extra1) :
                new ObjectParameter("extra1", typeof(string));
    
            var extra2Parameter = extra2 != null ?
                new ObjectParameter("extra2", extra2) :
                new ObjectParameter("extra2", typeof(string));
    
            var yearIdParameter = yearId != null ?
                new ObjectParameter("yearId", yearId) :
                new ObjectParameter("yearId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournelMasterAdd", journalNoParameter, dateParameter, narrationParameter, optionalParameter, userIdParameter, branchIdParameter, extra1Parameter, extra2Parameter, yearIdParameter);
        }
    
        public virtual int JournelDetailsAddPassenger(string journalMasterId, Nullable<decimal> credit, Nullable<decimal> debit, string extra1, string extra2, string currecyConversionId)
        {
            var journalMasterIdParameter = journalMasterId != null ?
                new ObjectParameter("JournalMasterId", journalMasterId) :
                new ObjectParameter("JournalMasterId", typeof(string));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(decimal));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("debit", debit) :
                new ObjectParameter("debit", typeof(decimal));
    
            var extra1Parameter = extra1 != null ?
                new ObjectParameter("extra1", extra1) :
                new ObjectParameter("extra1", typeof(string));
    
            var extra2Parameter = extra2 != null ?
                new ObjectParameter("extra2", extra2) :
                new ObjectParameter("extra2", typeof(string));
    
            var currecyConversionIdParameter = currecyConversionId != null ?
                new ObjectParameter("currecyConversionId", currecyConversionId) :
                new ObjectParameter("currecyConversionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournelDetailsAddPassenger", journalMasterIdParameter, creditParameter, debitParameter, extra1Parameter, extra2Parameter, currecyConversionIdParameter);
        }
    
        public virtual ObjectResult<sp_PC_CompleteClearence_Result> sp_PC_CompleteClearence()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PC_CompleteClearence_Result>("sp_PC_CompleteClearence");
        }
    
        public virtual ObjectResult<Sp_ExistPcClearence_Result> Sp_ExistPcClearence()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ExistPcClearence_Result>("Sp_ExistPcClearence");
        }
    
        public virtual ObjectResult<Sp_PassengerReportStatus_Result> Sp_PassengerReportStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PassengerReportStatus_Result>("Sp_PassengerReportStatus");
        }
    
        public virtual ObjectResult<sp_ConsoleLetter_Result> sp_ConsoleLetter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ConsoleLetter_Result>("sp_ConsoleLetter");
        }
    }
}
